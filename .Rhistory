?exp()
exp(1)
exp(10)
as.complex(2)
as.numeric(2)
as.integer(2)
2 - 3i) * (7 + 5i)
(2 - 3i) * (7 + 5i)
Conj((2 - 3i) * (7 + 5i))
Re(Conj((2 - 3i) * (7 + 5i)))
(2 - 3i) * (7 + 5i)
Mod((2 - 3i) * (7 + 5i))
?Mod
Inf - Inf
0 * Inf
0 / 0
(NaN + 3) - 20 * 6
NaN * 0
sqrt(-3)
sqrt(as.complex(-3))
c(1,2,3,4,5,6)
c(c(1,2,3,4,5),c(1,2,3))
10:1
1:2
5:3
seq(1,10,2)
rep(5,10)
1:100
2 * 1:10
(-5,5) < 0
(-5:5)<0
c((-5:5)<0)
c(1,2,3,4)+c(10,20)
mean(c(4, 3, 2, 4, 3, 3, 5))
vsota.kvadratov <- function(n){}
vsota.kvadratov <- function(n){sum((1:n)^2)}
vsota.kvadratov(2)
vosta.kvadratov(3)
vsota.kvadratov(3)
#      sum(1 : 36)
vsota.kvadratov(2)
v * c(1,-1)
v * c(1,-1)
alterniraj <- function(v){
# 2. faza: Uvoz podatkov
#1. CSV TABELA
stanovanjska_p <- read.csv2(file="stopnja_pre1.csv",skip = 3, header=FALSE, sep=";"
)
stanovanjska_p <- stanovanjska_p[-c(7:28),]
stanovanjska_p <- stanovanjska_p[-c(2:3),-c(1:2)]
vektor_z_letnicami <- stanovanjska_p[1, ]
ime_vrstic <- c("leto","MoĹˇki","Ĺ˝enske","NULL")
rownames(stanovanjska_p)<-ime_vrstic
stanovanjska_p <- stanovanjska_p[,-c(1)]
stanovanjska_p <- stanovanjska_p[-c(4),]
colnames(stanovanjska_p)<-c(2005:2016)
stanovanjska_p <- stanovanjska_p[-c(1),]
View(stanovanjska_p)
vsota         = a + b
produkt       = a * b
potenca1      = a ** b
potenca2      = a ^ b
deljenje      = a / b
a = 7
b = 6
vsota         = a + b
produkt       = a * b
potenca1      = a ** b
potenca2      = a ^ b
deljenje      = a / b
celo_deljenje = a %/% b
modulo        = a %% b
print(potenca2)
print(potenca1)
s1 = "1"
s2 = toString(2)
s2
paste(s1, s2)
paste(s1, s2, sep="SEPARATOR")
paste(s1, s2, sep="")
paste("R pogosto avtomatsko pretvarja tipe. ", 1, sep="0.999... = ")
format(pi)
format(pi, digits = 15)
format(pi, scientific = TRUE)
format("*", width = 5)
format("*", width = 5, justify = "right")
nchar("Za dolžino niza uporabimo ukaz nchar.")
st = nchar(ime
ime = "Ajda"
st = nchar(ime)
ime = "Ajda"
st = nchar(ime)
print(st**(1/3))
st
v = c(1, 4, 9, 16, 25)
print(v)
length(v)
v1 = c(1, 2, 3)
v2 = c(4, 5, 6)
print(c(v1, 4))
print(c(v1, v2))
z1 = 1:5
z2 = -1.3:2.7
z1
z2
seq(1,100,5)
seq(1,100,4)
numeric(100)
print( as.list(1:3) )
print( list(1, "b", c(1, 2,3)))
l = as.list(5:15)
l[[1]]
print( as.list(1:3) )
print( list(1, "b", c(1, 2,3)))
library(ggplot2)
library(dplyr)
library(readr)
source("https://raw.githubusercontent.com/jaanos/APPR-2017-18/master/lib/uvozi.zemljevid.r")
svet <- uvozi.zemljevid("http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
"ne_50m_admin_0_countries", encoding = "UTF-8") %>% pretvori.zemljevid()
imf <- read_csv2("imf.csv") %>% mutate(GEO = parse_factor(GEO, levels(svet$NAME_LONG)))
imf.norm <- imf %>% select(-GEO) %>% scale()
rownames(imf.norm) <- imf$GEO
imf.norm <- imf %>% select(-GEO) %>% scale()
rownames(imf.norm) <- imf$GEO
imf <- read_csv2("imf.csv") %>% mutate(GEO = parse_factor(GEO, levels(svet$NAME_LONG)))
source("https://raw.githubusercontent.com/jaanos/APPR-2017-18/master/lib/uvozi.zemljevid.r")
svet <- uvozi.zemljevid("http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
"ne_50m_admin_0_countries", encoding = "UTF-8") %>% pretvori.zemljevid()
imf <- read_csv2("imf.csv") %>% mutate(GEO = parse_factor(GEO, levels(svet$NAME_LONG)))
library(ggplot2)
library(dplyr)
source("https://raw.githubusercontent.com/jaanos/APPR-2017/master/lib/uvozi.zemljevid.r")
zemljevid.sveta<- function(n){
k <- kmeans(imf.norm, 5, nstart = 1000)
skupine <- data.frame(GEO = imf$GEO, skupina = factor(k$cluster))
ggplot() + geom_polygon(data = svet %>% left_join(skupine, by = c("NAME_LONG" = "GEO")),
aes(x = long, y = lat, group = group, fill = skupina))
return(k$ize)
}
zemljevid.sveta(10)
imf.norm <- imf %>% select(-GEO) %>% scale()
rownames(imf.norm) <- imf$GEO
imf <- read_csv2("imf.csv") %>% mutate(GEO = parse_factor(GEO, levels(svet$NAME_LONG)))
source("https://raw.githubusercontent.com/jaanos/APPR-2017-18/master/lib/uvozi.zemljevid.r")
svet <- uvozi.zemljevid("http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip",
"ne_50m_admin_0_countries", encoding = "UTF-8") %>% pretvori.zemljevid()
imf <- read_csv2("imf.csv") %>% mutate(GEO = parse_factor(GEO, levels(svet$NAME_LONG)))
imf.norm <- imf %>% select(-GEO) %>% scale()
rownames(imf.norm) <- imf$GEO
c(1,2,3,4,5)
seq(along=10)
t= c(1,2,3,4,5)
seq(t=10)
t= c(2,4,3,4,5)
t= c(2,4,3,4,5)
t= c(2,4,3,4,5)
naredi vektor
seq(t=10)
reo(t,10)
rep(t,10)
data.frame(v=1:4,ch=t,n= 10)
data.frame(v=1:5,ch=t,n= 10)
data.frame(v=1:5,ch=t,n= 1)
data.frame(v=1:10,ch=t,n= 10)
data.frame(ch=t,n= 10)
data.frame(ch=t,n= 1:len(t))
data.frame(ch=t,n= 1:range(t))
data.frame(ch=t,n= 0:4)
data.frame(ch=t,n=1:5)
array(1:5,10)
rbind(t,u)
u=array(1:5,10)
rbind(t,u)
u=array(1:5,10)
u=array(1:5,10)
u=array(1:5,10)
m= array(1:5)
rbind(t,u.m)
rbind(t,u,m)
t[1]
t[0]
t[-(1:5)]
t[-(1:4)]
t[c(1,3,5)]
length(t)
s0 = c(50,50,50,50,50)
s1 = c(52.50,52.50,47.50,47.50,52.50)
s2 = c(49.88,55.12,49.88,45.12,49.88)
s3 = c(52.37,57.88,47.38,47.38,52.37)
s4 = c(49.75,60.78,45.01,49.75,54.99)
s5 = c(52.24,63.81,42.76,52.24,57.74)
izplacilo_X <-c(0,0,0,0,0)
izplacilo_y <- c(0,0,0,0,0)
tabela <- data.frames(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
#Opcije na ekstremni razkorak
library(tidyr)
tabela <- data.frames(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
library(combinat)
library(Rlab)
tabela <- data.frames(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
tabela <- data.frame(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
View(tabela)
u = 1.05
d = 0.95
U = 5
R = 0.03
T = 3
u = 1.05
d = 0.95
U = 5
R = 0.03
T = 3
View(tabela)
u = 1.05
d = 0.95
U = 5
R = 0.03
T = 3
s0 = c(50,50,50,50,50)
s1 = c(52.50,52.50,47.50,47.50,52.50)
s2 = c(49.88,55.12,49.88,45.12,49.88)
s3 = c(52.37,57.88,47.38,47.38,52.37)
s4 = c(49.75,60.78,45.01,49.75,54.99)
s5 = c(52.24,63.81,42.76,52.24,57.74)
izplacilo_X <-c(0,0,0,0,0)
izplacilo_y <- c(0,0,0,0,0)
tabela <- data.frame(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
for (i in 1:5){
l = max( max(tabela1[i,(T+1):(U+1)])  -   max(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_X[i] <- l
}
for (i in 1:5){
k = max( min(tabela1[i,(T+1):(U+1)])  -   min(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_Y[i] <- k
}
library(tidyr)
library(combinat)
library(Rlab)
#1.a)
u = 1.05
d = 0.95
U = 5
R = 0.03
T = 3
s0 = c(50,50,50,50,50)
s1 = c(52.50,52.50,47.50,47.50,52.50)
s2 = c(49.88,55.12,49.88,45.12,49.88)
s3 = c(52.37,57.88,47.38,47.38,52.37)
s4 = c(49.75,60.78,45.01,49.75,54.99)
s5 = c(52.24,63.81,42.76,52.24,57.74)
izplacilo_X <-c(0,0,0,0,0)
izplacilo_y <- c(0,0,0,0,0)
tabela1 <- data.frame(s0,s1,s2,s3,s4,s5, izplacilo_X,izplacilo_y)
for (i in 1:5){
l = max( max(tabela1[i,(T+1):(U+1)])  -   max(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_X[i] <- l
}
for (i in 1:5){
k = max( min(tabela1[i,(T+1):(U+1)])  -   min(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_Y[i] <- k
}
View(tabela1)
library(tidyr)
library(combinat)
library(Rlab)
#1.a)
u = 1.05
d = 0.95
U = 5
R = 0.03
T = 3
s0 = c(50,50,50,50,50)
s1 = c(52.50,52.50,47.50,47.50,52.50)
s2 = c(49.88,55.12,49.88,45.12,49.88)
s3 = c(52.37,57.88,47.38,47.38,52.37)
s4 = c(49.75,60.78,45.01,49.75,54.99)
s5 = c(52.24,63.81,42.76,52.24,57.74)
izplacilo_X <-c(0,0,0,0,0)
izplacilo_y <- c(0,0,0,0,0)
tabela1 <- data.frame(s0,s1,s2,s3,s4,s5)
for (i in 1:5){
l = max( max(tabela1[i,(T+1):(U+1)])  -   max(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_X[i] <- l
}
for (i in 1:5){
k = max( min(tabela1[i,(T+1):(U+1)])  -   min(tabela1[i, 1:T]), 0)
tabela1$Izplacilo_Y[i] <- k
}
View(tabela1)
izplacilo <- function(vrsta, T, type = c("call", "put") ) {
if (type == "call") {
return( max( max(vrsta[(T+1):length(vrsta)])  -   max(vrsta[1:T]), 0))}
else {
return( max( min(vrsta[(T+1):length(vrsta)])  -   min(vrsta[1:T]), 0) )}
}
izplacilo(c(50,52.5,49.88,52.37,49.75,52.24),3,"call")
izplacilo(c(50,52.5,55.12,57.88,60.78,63.81),3,"put")
drevo <- hcube(rep(2,U), translation = -1)
drevo
binomski <- function(S0,u,d,U,R,T,type){
q = (1+R-d)/(u-d)
razpleti <- hcube(rep(2,U), translation = -1) #drevo stanj 1 pomeni up, 0 down
razpleti_1 <- d**(1-razpleti) * u**(razpleti)
k <- rowSums(razpleti) #vektor, ki za vsako vrstico pove kolikokrat je up
vektor_verjetnosti_koncnih_stanj <- q^k *(1-q)^(U-k)
razpleti_1 <- t(apply( razpleti_1, 1, cumprod))
vrednosti <- cbind(S0, S0*razpleti_1)
izplacila <- apply(vrednosti, 1, function(x) izplacilo(x,T,type))
E <- sum(izplacila * vektor_verjetnosti_koncnih_stanj)
return (E/(1+R)^U)
}
binomski(50,1.05,0.95,5,0.03,3,"call")
binomski(50, 1.05, 0.9 , 10, 0.03, 5, "call")
monte <- function(S0, u, d, U, R, T, type, N){
q = (1+R-d)/(u-d)
stanja <- matrix(rbinom(U*N,1,q),N,U)
stanja_1 <- d**(1-stanja) * u**(stanja)
k <- rowSums(stanja) #vektor, ki za vsako vrstico pove kolikokrat je up
vektor_verjetnosti_koncnih_stanj <- q^k *(1-q)^(U-k)
stanja_1 <- t(apply(stanja_1, 1, cumprod))
vrednosti <- cbind(S0, S0*stanja_1)
izplacila <- apply(vrednosti, 1, function(x) izplacilo(x,T,type))
E= sum(izplacila)/ length(izplacila)
return (E/(1+R)^U)
}
#simuliranje vrednosti
monte(60,1.05,0.95,15,0.01,8,"put",10)
monte(60,1.05,0.95,15,0.01,8,"put",100)
monte(60,1.05,0.95,15,0.01,8,"put",1000)
monte(50,1.05,0.9,10,0.03,5,"call",100)
monte(70, 1.05, 1   ,  7,    0, 5, "put",2000)
monte(90, 1.15, 0.8 , 10, 0.01, 3, "call",50000)
monte(90, 1.15, 0.8 , 10, 0.01, 3, "call",50000)
N1 <- c()
N2 <- c()
N3 <- c()
M <- 100
for (i in c(1:M)){
N1 <- c(N1,monte(60,1.05,0.95,15,0.01,8,"put",10) )
N2 <- c(N2,monte(60,1.05,0.95,15,0.01,8,"put",100) )
N3 <- c(N3,monte(60,1.05,0.95,15,0.01,8,"put",1000) )
}
View(N1)
cena_binomske <- binomski(60,1.05,0.95,15,0.01,8,"put") #cena premije dobljena z binomksim modelom
cena_binomske
min <- floor(min(c(N1,N2,N3)))
max <- ceiling(max(c(N1,N2,N3)))
#histogram N1
pov.N1 <- mean(N1) #povprečje vrednosti N1
odklon.N1 <- sqrt(var(N1)) #standardni odklon vrednosti N1
x1_odklon_desno <- cena_binomske + odklon.N1
x1_odklon_levo <- cena_binomske - odklon.N1
histogram1 <-hist(N1,breaks = 20,
main = "Monte Carlo: N=10",
xlab = "Premija",
xlim = c(min, max),
col ="yellow")
abline(v= pov.N1, col = "green")
abline (v = cena_binomske, col = "red", lty = "dashed")
arrows(x0 = cena_binomske, y0 = 0, x1= x1_odklon_desno, col= "green", length = 0.1 )
arrows(x0 = cena_binomske, y0 = 0, x1= x1_odklon_levo, col= "green", length = 0.1 )
legend('topright',
legend = c('Monte Carlo', 'Analiza modela'),
col = c('green', 'red'),
cex=0.8,
lty=c("solid","dashed"))
#histogram N2
pov.N2 <- mean(N2) #povprečje vrednosti N1
odklon.N2 <- sqrt(var(N2)) #standardni odklon vrednosti N1
x2_odklon_desno <- cena_binomske + odklon.N2
x2_odklon_levo <- cena_binomske - odklon.N2
histogram2 <-hist(N2,breaks = 20,
main = "Monte Carlo: N=100",
xlab = "Premija",
xlim = c(min, max),
col ="yellow")
abline(v= pov.N2, col = "green")
abline (v = cena_binomske, col = "red", lty = "dashed")
arrows(x0 = cena_binomske, y0 = 0, x1= x2_odklon_desno, col= "green", length = 0.1 )
arrows(x0 = cena_binomske, y0 = 0, x1= x2_odklon_levo, col= "green", length = 0.1 )
legend('topright',
legend = c('Monte Carlo', 'Analiza modela'),
col = c('green', 'red'),
cex=0.8,
lty=c("solid","dashed"))
#histogram N3
pov.N3 <- mean(N3) #povprečje vrednosti N1
odklon.N3 <- sqrt(var(N3)) #standardni odklon vrednosti N1
x3_odklon_desno <- cena_binomske + odklon.N3
x3_odklon_levo <- cena_binomske - odklon.N3
histogram3 <-hist(N3,breaks = 20,
main = "Monte Carlo: N=1000",
xlab = "Premija",
xlim = c(min, max),
col ="yellow")
abline(v= pov.N3, col = "green")
abline (v = cena_binomske, col = "red", lty = "dashed")
arrows(x0 = cena_binomske, y0 = 0, x1= x3_odklon_desno, col= "green", length = 0.1 )
arrows(x0 = cena_binomske, y0 = 0, x1= x3_odklon_levo, col= "green", length = 0.1 )
legend('topright',
legend = c('Monte Carlo', 'Analiza modela'),
col = c('green', 'red'),
cex=0.8,
lty=c("solid","dashed"))
vzorec <- scan("vzorec1.txt")
system("python //spin/StareA15$/_System/MyDocuments/OPB/uvoz.py")
system("python //spin/StareA15$/_System/MyDocuments/OPB/uvoz.py")
setwd("U:/Iskalnik-postnih-posiljk-master/Iskalnik-postnih-posiljk")
# Skopiraj datoteko v auth.py ali auth.R in vnesi podatke za priklop na bazo
db = 'sem2019_anjazk'
host = 'baza.fmf.uni-lj.si'
user = 'anjazk'
password = '7kjgb4yf'
install.packages("readxl")
library(readxl)
library(dplyr)
poste <- read.csv2('seznam 2.csv')
poste <- poste[-c(1,2),-c(1,4)]
library(readxl)
library(dplyr)
poste <- read.csv2(file = "seznam_2.csv")
poste <- poste[-c(1,2),-c(1,4)]
View(poste)
names(poste) <- c('postna_st', 'posta')
#odstranimo nekaj ponavljajocih se post (Lj, Mb, Kp), da lahko uporabimo vektorske funkcije
poste <- poste[-c(201:240),]
poste <- poste[-c(273:282),]
poste <- poste[-c(159:161),]
osebe <- read.csv('osebe.csv')
osebe$prebivalisce <- sample(poste$posta)
View(osebe)
poste$postna_st <- as.numeric(poste$postna_st)
seznam_post <- read.csv2(file = "seznam_1.csv")
View(seznam_post)
seznam_post <- read.csv2(file = "seznam_1.csv")
View(seznam_post)
#Najprej uvozimo seznam post.
poste <- read.csv2(file = "seznam_1.csv")
#odstranimo nekaj ponavljajocih se post (Lj, Mb, Kp), da lahko uporabimo vektorske funkcije
poste <- poste[-c(201:240),]
poste <- poste[-c(273:282),]
poste <- poste[-c(159:161),]
#Nato uvozimo tabelo osebe
osebe <- read.csv('osebe.csv')
osebe$prebivalisce <- sample(poste$posta)
#novo zgenerirana baza, 10 000 podatkov - boljse kot prejsnja, ki jih je imela samo 1000
posiljke <- read.csv('posiljkee.csv')
#Zgeneriramo se tabelo posiljke, 10 000 podatkov.
posiljke <- read.csv('posiljkee.csv')
View(posiljke)
#k tabeli posiljke smo dodali posiljatelja in naslovnika, od koder lahko tudi razberemo
#vstopno in izstopno mesto posiljke
posiljke$posiljatelj <- osebe$uporabnisko_ime
posiljke$naslovnik <- sample(osebe$uporabnisko_ime)
#kjer je vmesni datum 0, damo tudi da tudi vmesni kraj 0,
#saj je posiljka sla direktno od posiljatelja k naslovniku, ni se vmes ustavljala
posiljke$vmesni_kraj <- sample(poste$postna_st)
#kjer je vmesni datum 0, damo tudi da tudi vmesni kraj 0,
#saj je posiljka sla direktno od posiljatelja k naslovniku, ni se vmes ustavljala
posiljke$vmesni_kraj <- sample(poste$postna_st)
#Zgeneriramo se tabelo posiljke, 10 000 podatkov.
posiljke <- read.csv('posiljkee.csv')
#k tabeli posiljke smo dodali posiljatelja in naslovnika, od koder lahko tudi razberemo
#vstopno in izstopno mesto posiljke
posiljke$posiljatelj <- osebe$uporabnisko_ime
posiljke$naslovnik <- sample(osebe$uporabnisko_ime) #spet premesamo stolpec
#kjer je vmesni datum 0, damo tudi da tudi vmesni kraj 0,
#saj je posiljka sla direktno od posiljatelja k naslovniku, ni se vmes ustavljala
posiljke$vmesni_kraj <- sample(poste$postna_st)
View(poste)
colnames(poste) <- c(postna_st, naziv_poste)
colnames(poste) <- c("postna_st", "naziv_poste")
#kjer je vmesni datum 0, damo tudi da tudi vmesni kraj 0,
#saj je posiljka sla direktno od posiljatelja k naslovniku, ni se vmes ustavljala
posiljke$vmesni_kraj <- sample(poste$postna_st)
vmesno_nahajalisce <- posiljke
vmesno_nahajalisce <- vmesno_nahajalisce[,-c(2,3,5,6,7)]
View(vmesno_nahajalisce)
View(posiljke)
posiljke$vmesni_kraj <- NULL
#Zgeneriramo se tabelo posiljke, 10 000 podatkov.
posiljke <- read.csv('posiljkee.csv')
#k tabeli posiljke smo dodali posiljatelja in naslovnika, od koder lahko tudi razberemo
#vstopno in izstopno mesto posiljke
posiljke$posiljatelj <- osebe$uporabnisko_ime
posiljke$naslovnik <- sample(osebe$uporabnisko_ime) #spet premesamo stolpec
#kjer je vmesni datum 0, damo tudi da tudi vmesni kraj 0,
#saj je posiljka sla direktno od posiljatelja k naslovniku, ni se vmes ustavljala
posiljke$vmesni_kraj <- sample(poste$postna_st)
#Naredimo se tabelo za vmesno nahajalisce.
vmesno_nahajalisce <- posiljke
vmesno_nahajalisce <- vmesno_nahajalisce[,-c(2,3,5,6,7)]
posiljke <- posiljke[,-c(4,8)]
install.packages(c("dbplyr", "RPostgreSQL"))
View(osebe)
View(poste)
View(posiljke)
View(vmesno_nahajalisce)
View(osebe)
View(osebe)
source('C:/Users/Uporabnik/Fax/OPB/Iskalnik-postnih-posiljk/uvoz.R')
library(dplyr)
source('C:/Users/Uporabnik/Fax/OPB/Iskalnik-postnih-posiljk/uvoz.R')
osebe$prebivalisce <- sample(poste$posta) #Premesamo stolpec posta
source('C:/Users/Uporabnik/Fax/OPB/Iskalnik-postnih-posiljk/uvoz.R')
View(poste)
osebe$prebivalisce <- sample(poste$posta) #Premesamo stolpec posta
osebe$prebivalisce1 <- poste$naziv_poste
osebe$prebivalisce2 <- sample(poste$naziv_poste) #Premesamo stolpec posta
source('C:/Users/Uporabnik/Fax/OPB/Iskalnik-postnih-posiljk/uvoz.R')
View(osebe)
